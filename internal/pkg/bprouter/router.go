package bprouter

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/gin-gonic/gin"
)

/*
HasNext calculates the hasNext field for listing APIs based on the current page and pageSize
and the total number of elements available.
*/
func HasNext(page int, pageSize int, totalCount int64) bool {
	return int64(pageSize*page) < totalCount
}

/*
ReturnValidationError returns an Unprocessable Request status code (422) and all the errors generated by the input validator.
*/
func ReturnValidationError(ctx *gin.Context, err error) {
	ctx.AbortWithStatusJSON(http.StatusUnprocessableEntity, gin.H{"errors": strings.Split(strings.ReplaceAll(err.Error(), ".", ""), "; ")})
}

/*
ReturnBadRequestError returns a Bad Request status code (400) and all the errors generated by the input validator.
*/
func ReturnBadRequestError(ctx *gin.Context, err error) {
	ctx.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"errors": strings.Split(strings.ReplaceAll(err.Error(), ".", ""), "; ")})
}

/*
ReturnUnauthorizedError returns an Unauthroized status code (401).
*/
func ReturnUnauthorizedError(ctx *gin.Context) {
	ctx.AbortWithStatusJSON(http.StatusUnauthorized, gin.H{"errors": []string{"unauthorized"}})
}

/*
ReturnForbiddenError returns a Forbidden status code (403).
*/
func ReturnForbiddenError(ctx *gin.Context) {
	ctx.AbortWithStatusJSON(http.StatusForbidden, gin.H{"errors": []string{"forbidden"}})
}

/*
ReturnNotFoundError returns a Not Found status code (404).
*/
func ReturnNotFoundError(ctx *gin.Context, err error) {
	ctx.AbortWithStatusJSON(http.StatusNotFound, gin.H{"errors": strings.Split(strings.ReplaceAll(err.Error(), ".", ""), "; ")})
}

/*
ReturnCreated returns a Created status code (201) with payload.
*/
func ReturnCreated(ctx *gin.Context, data *gin.H) {
	ctx.JSON(http.StatusCreated, data)
}

/*
ReturnOk returns a OK status code (200) with the given payload.
*/
func ReturnOk(ctx *gin.Context, data *gin.H) {
	ctx.JSON(http.StatusOK, data)
}

/*
ReturnAccepted returns a Accepted status code (202) without payload.
*/
func ReturnAccepted(ctx *gin.Context) {
	ctx.String(http.StatusAccepted, "")
}

/*
ReturnNoContent returns a No Content status code (204) without payload.
*/
func ReturnNoContent(ctx *gin.Context) {
	ctx.String(http.StatusNoContent, "")
}

/*
ReturnTimeOutError returns a Timeout status code (408) with the given payload.
*/
func ReturnTimeOutError(ctx *gin.Context) {
	ctx.JSON(http.StatusRequestTimeout, gin.H{"errors": []string{"request-timeout"}})
}

/*
ReturnTooManyRequests returns a Too Many Requests status code (429) with the given payload.
*/
func ReturnTooManyRequests(ctx *gin.Context, retryAfter int64) {
	ctx.Header("Retry-After", fmt.Sprintf("%d", retryAfter))
	ctx.JSON(http.StatusTooManyRequests, gin.H{"errors": []string{"too-many-requests"}})
}

/*
ReturnGenericError returns an Internal Server Error status code (500) with the given payload.
*/
func ReturnGenericError(ctx *gin.Context) {
	ctx.JSON(http.StatusInternalServerError, gin.H{"errors": []string{"internal-server-error"}})
}

/*
BindParameters accept an object as DTO and tries to populate it with all the
parameters found in the URI, Query params and JSON payload..
*/
func BindParameters(ctx *gin.Context, obj any) {
	ctx.ShouldBindUri(&obj)
	ctx.ShouldBindQuery(&obj)
	ctx.ShouldBindJSON(&obj)
}
